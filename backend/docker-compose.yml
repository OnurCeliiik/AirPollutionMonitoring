services:
  # TimescaleDB for time-series data
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=timescaledb
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka message broker
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CREATE_TOPICS: "raw-air-data:1:1,anomaly-alerts:1:1"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Ingest service (API Gateway)
  ingest:
    build:
      context: .
      dockerfile: ./build/ingest/Dockerfile
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      - KAFKA_BROKERS=kafka:29092
      - PORT=8080
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Data processor service
  processor:
    build:
      context: .
      dockerfile: ./build/processor/Dockerfile
    restart: unless-stopped
    environment:
      - KAFKA_BROKERS=kafka:29092
      - DB_CONNECTION_STRING=postgres://postgres:postgres@timescaledb:5432/timescaledb?sslmode=disable
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy

  # Anomaly notifier service
  notifier:
    build:
      context: .
      dockerfile: ./build/notifier/Dockerfile
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - KAFKA_BROKERS=kafka:29092
      - DB_CONNECTION_STRING=postgres://postgres:postgres@timescaledb:5432/timescaledb?sslmode=disable
      - PORT=8081
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  timescaledb_data: 